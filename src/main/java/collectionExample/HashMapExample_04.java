package collectionExample;

import java.util.HashMap;

public class HashMapExample_04 {

    //Интерфейс Map<K, V> представляет отображение или иначе говоря словарь, где каждый элемент представляет пару "ключ-значение".
    // При этом все ключи уникальные в рамках объекта Map. Такие коллекции облегчают поиск элемента, если нам известен ключ - уникальный идентификатор объекта.
    //Следует отметить, что в отличие от других интерфейсов, которые представляют коллекции, интерфейс Map НЕ расширяет интерфейс Collection.


    //    void clear(): очищает коллекцию
    //
    //    boolean containsKey(Object k): возвращает true, если коллекция содержит ключ k
    //
    //    boolean containsValue(Object v): возвращает true, если коллекция содержит значение v
    //
    //    Set<Map.Entry<K, V>> entrySet(): возвращает набор элементов коллекции. Все элементы представляют объект Map.Entry
    //
    //    boolean equals(Object obj): возвращает true, если коллекция идентична коллекции, передаваемой через параметр obj
    //
    //    boolean isEmpty: возвращает true, если коллекция пуста

    // V get(Object k): возвращает значение объекта, ключ которого равен k. Если такого элемента не окажется, то возвращается значение null
    //
    //    V getOrDefault(Object k, V defaultValue): возвращает значение объекта, ключ которого равен k. Если такого элемента не окажется, то возвращается значение defaultVlue
    //
    //    V put(K k, V v): помещает в коллекцию новый объект с ключом k и значением v. Если в коллекции уже есть объект с подобным ключом, то он перезаписывается. После добавления возвращает предыдущее значение для ключа k, если он уже был в коллекции. Если же ключа еще не было в коллекции, то возвращается значение null
    //
    //    V putIfAbsent(K k, V v): помещает в коллекцию новый объект с ключом k и значением v, если в коллекции еще нет элемента с подобным ключом.
    //
    //    Set<K> keySet(): возвращает набор всех ключей отображения

    // Collection<V> values(): возвращает набор всех значений отображения
    //
    //    void putAll(Map<? extends K, ? extends V> map): добавляет в коллекцию все объекты из отображения map
    //
    //    V remove(Object k): удаляет объект с ключом k
    //
    //    int size(): возвращает количество элементов коллекции

    //Чтобы положить объект в коллекцию, используется метод put, а чтобы получить по ключу - метод get.
    // Реализация интерфейса Map также позволяет получить наборы как ключей, так и значений. А метод entrySet() возвращает набор всех элементов в виде объектов
    //Map.Entry<K, V>.

//Map.Entry<K, V>. Методы
//    boolean equals(Object obj): возвращает true, если объект obj, представляющий интерфейс Map.Entry, идентичен текущему
//
//    K getKey(): возвращает ключ объекта отображения
//
//    V getValue(): возвращает значение объекта отображения
//
//    V setValue(V v): устанавливает для текущего объекта значение v
//
//    int hashCode(): возвращает хеш-код данного объекта

    //Базовым классом для всех отображений является абстрактный класс AbstractMap, который реализует большую часть методов интерфейса Map.
    // Наиболее распространенным классом отображений является HashMap, который реализует интерфейс Map и наследуется от класса AbstractMap.


    public static void main(String[] args) {
        HashMap<String, String> map = new HashMap<String, String>();

        map.put("admin", "password");
        map.put("user", "password 2");

        String login = "user";
        String pass = "password 2";

        if(map.containsKey(login)) {
            if (map.get(login).equals(pass)) {
                System.out.println("Доступ разрешен");
            } else {
                System.out.println("Пароль неверный");
            }
        } else {
            System.out.println("Пользователя нет");
        }

    }
}
