package collectionExample;

import java.util.ArrayDeque;

//Очереди представляют структуру данных, работающую по принципу FIFO (first in - first out).
// То есть чем раньше был добавлен элемент в коллекцию, тем раньше он из нее удаляется.
// Это стандартная модель однонаправленной очереди. Однако бывают и двунаправленные - то есть такие,
// в которых мы можем добавить элемент не только в начала, но и в конец.
// И соответственно удалить элемент не только из конца, но и из начала.

//FIFO
//Обобщенный интерфейс Queue<E> расширяет базовый интерфейс Collection и определяет поведение класса в качестве однонаправленной очереди.
// Свою функциональность он раскрывает через следующие методы:
//
//        E element(): возвращает, но не удаляет, элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElementException
//        boolean offer(E obj): добавляет элемент obj в конец очереди. Если элемент удачно добавлен, возвращает true, иначе - false
//        E peek(): возвращает без удаления элемент из начала очереди. Если очередь пуста, возвращает значение null
//        E poll(): возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
//        E remove(): возвращает с удалением элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElem

//FILO - LIFO
//Интерфейс Deque расширяет вышеописанный интерфейс Queue и определяет поведение двунаправленной очереди,
// которая работает как обычная однонаправленная очередь, либо как стек, действующий по принципу LIFO (последний вошел - первый вышел).
//    void addFirst(E obj): добавляет элемент в начало очереди
//
//    void addLast(E obj): добавляет элемент obj в конец очереди
//
//    E getFirst(): возвращает без удаления элемент из головы очереди. Если очередь пуста, генерирует исключение NoSuchElementException
//
//    E getLast(): возвращает без удаления последний элемент очереди. Если очередь пуста, генерирует исключение NoSuchElementException
//
//    boolean offerFirst(E obj): добавляет элемент obj в самое начало очереди. Если элемент удачно добавлен, возвращает true, иначе - false
//
//    boolean offerLast(E obj): добавляет элемент obj в конец очереди. Если элемент удачно добавлен, возвращает true, иначе - false
//     E peekFirst(): возвращает без удаления элемент из начала очереди. Если очередь пуста, возвращает значение null
//
//             E peekLast(): возвращает без удаления последний элемент очереди. Если очередь пуста, возвращает значение null
//
//             E pollFirst(): возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
//
//             E pollLast(): возвращает с удалением последний элемент очереди. Если очередь пуста, возвращает значение null
//
//             E pop(): возвращает с удалением элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElementException
//
//             void push(E element): добавляет элемент в самое начало очереди
// E removeFirst(): возвращает с удалением элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElementException
//
//         E removeLast(): возвращает с удалением элемент из конца очереди. Если очередь пуста, генерирует исключение NoSuchElementException
//
//         boolean removeFirstOccurrence(Object obj): удаляет первый встреченный элемент obj из очереди. Если удаление произшло, то возвращает true,
//         иначе возвращает false.
//
//         boolean removeLastOccurrence(Object obj): удаляет последний встреченный элемент obj из очереди. Если удаление произшло,
//         то возвращает true, иначе возвращает false.
//
//В Java очереди представлены рядом классов. Одни из низ - класс ArrayDeque<E>.
// Этот класс представляют обобщенную двунаправленную очередь, наследуя функционал от класса AbstractCollection и применяя интерфейс Deque.
//В классе ArrayDeque определены следующие конструкторы:
//
//    ArrayDeque(): создает пустую очередь
//
//    ArrayDeque(Collection<? extends E> col): создает очередь, наполненную элементами из коллекции col
//
//    ArrayDeque(int capacity): создает очередь с начальной емкостью capacity.
//    Если мы явно не указываем начальную емкость, то емкость по умолчанию будет равна 16

public class ArrayDequeExample_02 {
    public static void main(String[] args) {
        ArrayDeque<String> deque = new ArrayDeque<String>(); //FILO - LIFO
        ArrayDeque<String> que = new ArrayDeque<String>(); //FIFO

        que.addLast("1");
        que.addLast("2");
        que.addLast("3");

        deque.addFirst("1");
        deque.addFirst("2");
        deque.addFirst("3");

        System.out.println("Que");
        while (true) {
            String el = que.pollFirst(); //для снятия
            if (el == null) break; //тк Если очередь пуста, возвращает значение null

            System.out.println(el);
        }
        System.out.println("Deque");
        while (true) {
            String el = deque.pollFirst(); //для снятия
            if (el == null) break;
            System.out.println(el);
        }
    }
}
